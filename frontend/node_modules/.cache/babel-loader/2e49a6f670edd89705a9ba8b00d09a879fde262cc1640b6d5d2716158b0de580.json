{"ast":null,"code":"import axios from \"axios\";\nimport authService from \"./auth.service\";\nconst API_URL = \"http://localhost:8000/\";\n\n// Fonction pour obtenir le token JWT actuel\nconst getAuthToken = () => {\n  const user = authService.getCurrentUser();\n  return user === null || user === void 0 ? void 0 : user.access;\n};\n\n// Création d'une instance axios avec configuration\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Intercepteur pour ajouter le token aux requêtes\napiClient.interceptors.request.use(config => {\n  const token = getAuthToken();\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Fonction pour récupérer les informations de l'utilisateur connecté\nconst getUserInfo = async () => {\n  return apiClient.get(\"customer/auth/user/\");\n};\nconst apiService = {\n  getUserInfo\n};\nexport default apiService;","map":{"version":3,"names":["axios","authService","API_URL","getAuthToken","user","getCurrentUser","access","apiClient","create","baseURL","headers","interceptors","request","use","config","token","error","Promise","reject","getUserInfo","get","apiService"],"sources":["C:/dev/mabutu/mabutu/frontend/src/services/api.service.js"],"sourcesContent":["import axios from \"axios\";\r\nimport authService from \"./auth.service\";\r\n\r\nconst API_URL = \"http://localhost:8000/\";\r\n\r\n// Fonction pour obtenir le token JWT actuel\r\nconst getAuthToken = () => {\r\n  const user = authService.getCurrentUser();\r\n  return user?.access;\r\n};\r\n\r\n// Création d'une instance axios avec configuration\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Intercepteur pour ajouter le token aux requêtes\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = getAuthToken();\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Fonction pour récupérer les informations de l'utilisateur connecté\r\nconst getUserInfo = async () => {\r\n  return apiClient.get(\"customer/auth/user/\");\r\n};\r\n\r\nconst apiService = {\r\n  getUserInfo,\r\n};\r\n\r\nexport default apiService; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,gBAAgB;AAExC,MAAMC,OAAO,GAAG,wBAAwB;;AAExC;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,MAAMC,IAAI,GAAGH,WAAW,CAACI,cAAc,CAAC,CAAC;EACzC,OAAOD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,MAAM;AACrB,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGP,KAAK,CAACQ,MAAM,CAAC;EAC7BC,OAAO,EAAEP,OAAO;EAChBQ,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGZ,YAAY,CAAC,CAAC;EAC5B,IAAIY,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAE,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,OAAOZ,SAAS,CAACa,GAAG,CAAC,qBAAqB,CAAC;AAC7C,CAAC;AAED,MAAMC,UAAU,GAAG;EACjBF;AACF,CAAC;AAED,eAAeE,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}